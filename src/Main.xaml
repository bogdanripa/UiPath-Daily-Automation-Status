<?xml version="1.0" encoding="utf-8"?>
<Activity x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:p="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:uga="clr-namespace:UiPath.GSuite.Activities;assembly=UiPath.GSuite.Activities" xmlns:ugage="clr-namespace:UiPath.GSuite.Activities.Gmail.Enums;assembly=UiPath.GSuite.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:upr="clr-namespace:UiPath.Platform.ResourceHandling;assembly=UiPath.Platform" xmlns:usau="clr-namespace:UiPath.Shared.Activities.Utils;assembly=UiPath.GSuite.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="36">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections</x:String>
      <x:String>UiPath.GSuite.Activities.Gmail.Enums</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.GSuite.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Productivity.Activities.Contracts</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="32">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Net.Primitives</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Private.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.GSuite.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence p:VirtualizedContainerService.HintSize="356,732" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="foldersList" />
      <Variable x:TypeArguments="njl:JObject" Default="[new Newtonsoft.Json.Linq.JObject From {  }]" Name="foldersListJSON" />
      <Variable x:TypeArguments="x:Int32" Default="[0]" Name="i" />
      <Variable x:TypeArguments="x:String" Name="folderName" />
      <Variable x:TypeArguments="x:String" Name="jSONResponse">
        <p:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="SourceIdRef">OrchestratorHttpRequest_2</x:String>
            <x:String x:Key="SourcePropertyName">Result</x:String>
          </scg:Dictionary>
        </p:WorkflowViewStateService.ViewState>
      </Variable>
      <Variable x:TypeArguments="x:Int32" Name="j" />
      <Variable x:TypeArguments="x:String" Name="jSONResponse_1">
        <p:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="SourceIdRef">OrchestratorHttpRequest_3</x:String>
            <x:String x:Key="SourcePropertyName">Result</x:String>
          </scg:Dictionary>
        </p:WorkflowViewStateService.ViewState>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="emailStr" />
      <Variable x:TypeArguments="x:Boolean" Default="[False]" Name="printedFolderName" />
      <Variable x:TypeArguments="x:String" Name="color" />
      <Variable x:TypeArguments="x:String" Default="[string.Format(&quot;{0}&quot;, DateTime.Now.ToString(&quot;d MMM yyyy&quot;))]" Name="today" />
      <Variable x:TypeArguments="njl:JObject" Default="[new Newtonsoft.Json.Linq.JObject From {  }]" Name="listJSON" />
      <Variable x:TypeArguments="njl:JObject" Default="[new Newtonsoft.Json.Linq.JObject From {  }]" Name="jSONObject">
        <p:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="SourceIdRef">DeserializeJson`1_4</x:String>
            <x:String x:Key="SourcePropertyName">JsonObject</x:String>
          </scg:Dictionary>
        </p:WorkflowViewStateService.ViewState>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="jSONResponse_2">
        <p:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:String x:Key="SourceIdRef">OrchestratorHttpRequest_4</x:String>
            <x:String x:Key="SourcePropertyName">Result</x:String>
          </scg:Dictionary>
        </p:WorkflowViewStateService.ViewState>
      </Variable>
    </Sequence.Variables>
    <p:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </p:WorkflowViewStateService.ViewState>
    <ui:TimeTrigger DaysOfMonthToRunOn="{x:Null}" HourlyRepeat="{x:Null}" HourlyStartingMinutes="{x:Null}" MinuteByMinuteRepeat="{x:Null}" MonthlyDaysToRunOn="{x:Null}" MonthlyRepeat="{x:Null}" MonthlyStartingTime="{x:Null}" Result="{x:Null}" TimeZone="{x:Null}" WeeklyDaysToRunOn="{x:Null}" WeeklyStartingTime="{x:Null}" CronExpression="0 0 6 */1 * ? *" DailyRepeat="1" DailyStartingTime="2024-02-09T06:00" DisplayName="Time Trigger" Frequency="Daily" sap2010:WorkflowViewState.IdRef="TimeTrigger_1" MonthDaySelection="DayOfMonth" />
    <ui:OrchestratorHttpRequest JSONPayload="{x:Null}" ResponseHeaders="{x:Null}" StatusCode="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Orchestrator HTTP Request - get folders" sap2010:WorkflowViewState.IdRef="OrchestratorHttpRequest_1" Method="GET" RelativeEndpoint="/odata/Folders" Result="[foldersList]" />
    <ui:DeserializeJson x:TypeArguments="njl:JObject" DisplayName="Deserialize folders JSON" sap2010:WorkflowViewState.IdRef="DeserializeJson`1_1" JsonObject="[foldersListJSON]" JsonString="[string.Format(&quot;{0}&quot;, foldersList)]" />
    <ui:LogMessage DisplayName="Log Message - folders found" sap2010:WorkflowViewState.IdRef="LogMessage_1" Message="[string.Format(&quot;Found {0} folders&quot;, foldersListJSON(&quot;value&quot;).Count)]" />
    <ui:InterruptibleWhile CurrentIndex="{x:Null}" Condition="[i &lt; foldersListJSON(&quot;value&quot;).Count]" DisplayName="While - folders" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_1">
      <ui:InterruptibleWhile.Body>
        <Sequence DisplayName="Body" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <Assign DisplayName="Set Variable - folder name" sap2010:WorkflowViewState.IdRef="Assign_2">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[folderName]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[foldersListJSON("value")(i)("FullyQualifiedName").ToString]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Set Variable Value - printed folder name" sap2010:WorkflowViewState.IdRef="Assign_6">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Boolean">[printedFolderName]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Boolean">[false]</InArgument>
            </Assign.Value>
          </Assign>
          <Sequence DisplayName="Queues" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <Sequence.Variables>
              <Variable x:TypeArguments="njl:JObject" Default="[new Newtonsoft.Json.Linq.JObject From {  }]" Name="qDetailsJSON" />
              <Variable x:TypeArguments="x:String" Name="qName" />
            </Sequence.Variables>
            <ui:OrchestratorHttpRequest JSONPayload="{x:Null}" ResponseHeaders="{x:Null}" StatusCode="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Orchestrator HTTP Request - get queues" FolderPath="[folderName]" sap2010:WorkflowViewState.IdRef="OrchestratorHttpRequest_2" Method="GET" RelativeEndpoint="/monitoring/QueuesMonitoring/GetQueuesTable?timeFrameMinutes=1440" Result="[jSONResponse]" />
            <ui:DeserializeJson x:TypeArguments="njl:JObject" DisplayName="Deserialize queues JSON" sap2010:WorkflowViewState.IdRef="DeserializeJson`1_2" JsonObject="[listJSON]" JsonString="[string.Format(&quot;{0}&quot;, jSONResponse)]" />
            <Assign DisplayName="Set Variable - initialize j" sap2010:WorkflowViewState.IdRef="Assign_3">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[0]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:InterruptibleWhile CurrentIndex="{x:Null}" Condition="[j &lt; listJSON(&quot;data&quot;).Count]" DisplayName="While - queues" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_2">
              <ui:InterruptibleWhile.Body>
                <Sequence DisplayName="Body" sap2010:WorkflowViewState.IdRef="Sequence_6">
                  <Assign DisplayName="Set Variable Value - queue name" sap2010:WorkflowViewState.IdRef="Assign_5">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[qName]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[listJSON("data")(j)("queueName").toString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:CommentOut DisplayName="Disabled activities 1" sap2010:WorkflowViewState.IdRef="CommentOut_2">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap2010:WorkflowViewState.IdRef="Sequence_12">
                        <ui:LogMessage DisplayName="Log Message - queue name" sap2010:WorkflowViewState.IdRef="LogMessage_5" Message="[string.Format(&quot;Queue: {0}/{1}&quot;, folderName, queueName)]" />
                      </Sequence>
                    </ui:CommentOut.Body>
                  </ui:CommentOut>
                  <ui:OrchestratorHttpRequest JSONPayload="{x:Null}" ResponseHeaders="{x:Null}" StatusCode="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Orchestrator HTTP Request - queue details" FolderPath="[folderName]" sap2010:WorkflowViewState.IdRef="OrchestratorHttpRequest_3" Method="GET" RelativeEndpoint="[&quot;/monitoring/QueuesMonitoring/GetProcessedItemsCounts?entityId=&quot;+listJSON(&quot;data&quot;)(j)(&quot;queueId&quot;).ToString+&quot;&amp;entityIds=&quot;+listJSON(&quot;data&quot;)(j)(&quot;queueId&quot;).ToString+&quot;&amp;timeFrameMinutes=1440&quot;]" Result="[jSONResponse_1]" />
                  <ui:DeserializeJson x:TypeArguments="njl:JObject" DisplayName="Deserialize JSON - queue details" sap2010:WorkflowViewState.IdRef="DeserializeJson`1_3" JsonObject="[qDetailsJSON]" JsonString="[string.Format(&quot;{0}&quot;, jSONResponse_1)]" />
                  <If Condition="[CInt(qDetailsJSON(&quot;countSuccessful&quot;)) &gt; 0 OR CInt(qDetailsJSON(&quot;countBusinessExceptions&quot;)) &gt; 0 OR CInt(qDetailsJSON(&quot;countApplicationExceptions&quot;)) &gt; 0]" DisplayName="If there was action" sap2010:WorkflowViewState.IdRef="If_1">
                    <If.Then>
                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
                        <If Condition="[printedFolderName = false]" DisplayName="If did not print the folder name" sap2010:WorkflowViewState.IdRef="If_2">
                          <If.Then>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_9">
                              <Assign DisplayName="Set Variable Value - yes, printed folder name" sap2010:WorkflowViewState.IdRef="Assign_7">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">[printedFolderName]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">[true]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign DisplayName="Set Variable Value - add folder" sap2010:WorkflowViewState.IdRef="Assign_8">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[emailStr]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[emailStr + "&lt;h3&gt;" + folderName + "&lt;/h3&gt;"]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_10" />
                          </If.Else>
                        </If>
                        <If Condition="[CInt(qDetailsJSON(&quot;countBusinessExceptions&quot;)) &gt; 0 OR CInt(qDetailsJSON(&quot;countApplicationExceptions&quot;)) &gt; 0]" DisplayName="If there were errors" sap2010:WorkflowViewState.IdRef="If_3">
                          <If.Then>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_13">
                              <Assign DisplayName="Set Variable Value - color red" sap2010:WorkflowViewState.IdRef="Assign_10">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[color]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">["style=""color: red; margin-left: 1em"""]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_14">
                              <Assign DisplayName="Set Variable Value - color none" sap2010:WorkflowViewState.IdRef="Assign_11">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[color]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">["style=""margin-left: 1em"""]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Else>
                        </If>
                        <Assign DisplayName="Set Variable Value - queue details" sap2010:WorkflowViewState.IdRef="Assign_9">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[emailStr]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[emailStr + "&lt;p "+color+"&gt;" + qName + " (q): " + qDetailsJSON("countSuccessful").ToString + " ok, " + (CInt(qDetailsJSON("countBusinessExceptions")) + CInt(qDetailsJSON("countApplicationExceptions"))).ToString + " failed&lt;/p&gt;"]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <ui:CommentOut DisplayName="Disabled activities" sap2010:WorkflowViewState.IdRef="CommentOut_1">
                          <ui:CommentOut.Body>
                            <Sequence DisplayName="Ignored Activities" sap2010:WorkflowViewState.IdRef="Sequence_11">
                              <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_6" Message="[string.Format(&quot;{0}&quot;, jSONResponse_1)]" />
                            </Sequence>
                          </ui:CommentOut.Body>
                        </ui:CommentOut>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_8" />
                    </If.Else>
                  </If>
                  <Assign DisplayName="Set Variable - increment j" sap2010:WorkflowViewState.IdRef="Assign_4">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ui:InterruptibleWhile.Body>
            </ui:InterruptibleWhile>
          </Sequence>
          <Sequence DisplayName="Jobs" sap2010:WorkflowViewState.IdRef="Sequence_16">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="pName" />
            </Sequence.Variables>
            <ui:OrchestratorHttpRequest JSONPayload="{x:Null}" ResponseHeaders="{x:Null}" StatusCode="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Orchestrator HTTP Request - get processes" FolderPath="[folderName]" sap2010:WorkflowViewState.IdRef="OrchestratorHttpRequest_4" Method="GET" RelativeEndpoint="/monitoring/JobsMonitoring/GetProcessesTable?timeFrameMinutes=1440" Result="[jSONResponse_2]" />
            <ui:DeserializeJson x:TypeArguments="njl:JObject" DisplayName="Deserialize processes JSON" sap2010:WorkflowViewState.IdRef="DeserializeJson`1_4" JsonObject="[listJSON]" JsonString="[string.Format(&quot;{0}&quot;, jSONResponse_2)]" />
            <Assign DisplayName="Set Variable - initialize j" sap2010:WorkflowViewState.IdRef="Assign_12">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">[0]</InArgument>
              </Assign.Value>
            </Assign>
            <ui:InterruptibleWhile CurrentIndex="{x:Null}" Condition="[j &lt; listJSON(&quot;data&quot;).Count]" DisplayName="While - processes" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_3">
              <ui:InterruptibleWhile.Body>
                <Sequence DisplayName="Body" sap2010:WorkflowViewState.IdRef="Sequence_17">
                  <Assign DisplayName="Set Variable Value - process name" sap2010:WorkflowViewState.IdRef="Assign_13">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[pName]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[listJSON("data")(j)("processName").ToString]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <If Condition="[CInt(listJSON(&quot;data&quot;)(j)(&quot;countSuccessful&quot;)) &gt; 0 OR CInt(listJSON(&quot;data&quot;)(j)(&quot;countErrors&quot;)) &gt; 0]" DisplayName="If there was action" sap2010:WorkflowViewState.IdRef="If_4">
                    <If.Then>
                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_19">
                        <If Condition="[printedFolderName = false]" DisplayName="If did not print the folder name" sap2010:WorkflowViewState.IdRef="If_5">
                          <If.Then>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_21">
                              <Assign DisplayName="Set Variable Value - yes, printed folder name" sap2010:WorkflowViewState.IdRef="Assign_16">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">[printedFolderName]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">[true]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign DisplayName="Set Variable Value - add folder" sap2010:WorkflowViewState.IdRef="Assign_17">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[emailStr]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[emailStr + "&lt;h3&gt;" + folderName + "&lt;/h3&gt;"]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_22" />
                          </If.Else>
                        </If>
                        <If Condition="[CInt(listJSON(&quot;data&quot;)(j)(&quot;countErrors&quot;)) &gt; 0]" DisplayName="If there were errors" sap2010:WorkflowViewState.IdRef="If_6">
                          <If.Then>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_23">
                              <Assign DisplayName="Set Variable Value - color red" sap2010:WorkflowViewState.IdRef="Assign_18">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[color]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">["style=""color: red; margin-left: 1em"""]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence sap2010:WorkflowViewState.IdRef="Sequence_24">
                              <Assign DisplayName="Set Variable Value - color none" sap2010:WorkflowViewState.IdRef="Assign_19">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[color]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">["style=""margin-left: 1em"""]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Else>
                        </If>
                        <Assign DisplayName="Set Variable Value - job details" sap2010:WorkflowViewState.IdRef="Assign_15">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[emailStr]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[emailStr + "&lt;p " + color + "&gt;" + pName+ " (j): " + listJSON("data")(j)("countSuccessful").ToString + " ok, " + listJSON("data")(j)("countErrors").ToString + " failed&lt;/p&gt;"]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_20" />
                    </If.Else>
                  </If>
                  <Assign DisplayName="Set Variable - increment j" sap2010:WorkflowViewState.IdRef="Assign_14">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[j]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[j+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ui:InterruptibleWhile.Body>
            </ui:InterruptibleWhile>
          </Sequence>
          <Assign DisplayName="Set Variable - increment i" sap2010:WorkflowViewState.IdRef="Assign_1">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </ui:InterruptibleWhile.Body>
    </ui:InterruptibleWhile>
    <If Condition="[string.IsNullOrEmpty(emailStr) = true]" DisplayName="If there was any action" sap2010:WorkflowViewState.IdRef="If_7">
      <If.Then>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_25">
          <Assign DisplayName="Set Variable Value - no action" sap2010:WorkflowViewState.IdRef="Assign_20">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[emailStr]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">["&lt;h3&gt;In the last 24 hours there was no action&lt;/h3&gt;"]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_26" />
      </If.Else>
    </If>
    <uga:SendEmailConnections ArgumentAttachmentPaths="{x:Null}" ArgumentAttachments="{x:Null}" AttachmentPaths="{x:Null}" Bcc="{x:Null}" Cc="{x:Null}" ConnectionAccountName="{x:Null}" ContinueOnError="{x:Null}" ReplyTo="{x:Null}" SingleAttachment="{x:Null}" TextBody="{x:Null}" AttachmentInputMode="UseExisting" AuthScopesInvalid="False" Body="[string.Format(&quot;&lt;p&gt;Hi,&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Here's the automation status for&amp;nbsp;{0}:&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;{1}&lt;/p&gt;&quot;, today, emailStr)]" ConnectionId="ed764d1e-6fa5-49bc-8924-128ed6b31c60" DisplayName="Send Email" sap2010:WorkflowViewState.IdRef="SendEmailConnections_1" Importance="Normal" InputType="HTML" SaveAsDraft="False" Subject="[string.Format(&quot;Automation Status ({0})&quot;, today)]" To="[New String(){&quot;you@yourdomain.com&quot;}]" UseConnectionService="True">
      <uga:SendEmailConnections.Attachments>
        <InArgument x:TypeArguments="scg:IEnumerable(upr:IResource)" />
      </uga:SendEmailConnections.Attachments>
      <uga:SendEmailConnections.AttachmentsBackup>
        <usau:BackupSlot x:TypeArguments="ugage:AttachmentInputMode" StoredValue="UseExisting">
          <usau:BackupSlot.BackupValues>
            <scg:Dictionary x:TypeArguments="ugage:AttachmentInputMode, scg:List(x:Object)" />
          </usau:BackupSlot.BackupValues>
        </usau:BackupSlot>
      </uga:SendEmailConnections.AttachmentsBackup>
      <uga:SendEmailConnections.InputTypeBackup>
        <usau:BackupSlot x:TypeArguments="ugage:BodyInputType" StoredValue="HTML">
          <usau:BackupSlot.BackupValues>
            <scg:Dictionary x:TypeArguments="ugage:BodyInputType, scg:List(x:Object)" />
          </usau:BackupSlot.BackupValues>
        </usau:BackupSlot>
      </uga:SendEmailConnections.InputTypeBackup>
    </uga:SendEmailConnections>
  </Sequence>
</Activity>
